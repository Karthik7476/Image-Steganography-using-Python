# -*- coding: utf-8 -*-
"""23N0459_IE509_CourseProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ybciqgSoxhLWpvBHdMzH40JveheOWDSI
"""

from PIL import Image

def convert_into_8_binary_bits(number):
    string_bits_list = []
    n = number
    for i in range(8):
        p = 7-i
        m = 2**p
        q = n//m
        r = n%m
        string_bits_list.append(q)
        n = r
    return string_bits_list

def convert_into_ASCII(info):
    list_bits = []
    for x in info:
        list_bits.append(convert_into_8_binary_bits(ord(x)))
    return list_bits

def modPix(pixels, info):
    coded_text = convert_into_ASCII(info)
    length_coded_text = len(coded_text)
    pix_iter = iter(pixels)
    modify = []

    for i in range(length_coded_text):
        colour_values = [value for value in pix_iter.__next__()[:3]]
        for j in range(3):
            if (coded_text[i][j] == 1 and colour_values[j] % 2 == 0):
                colour_values[j] = max(1, colour_values[j] - 1)
            elif (coded_text[i][j] == 0 and colour_values[j] % 2 == 1):
                colour_values[j] = colour_values[j] - 1
        modify.append(colour_values)
        colour_values = [value for value in pix_iter.__next__()[:3]]
        for j in range(3):
            if (coded_text[i][j+3] == 1 and colour_values[j] % 2 == 0):
                colour_values[j] = max(1, colour_values[j] - 1)
            elif (coded_text[i][j+3] == 0 and colour_values[j] % 2 == 1):
                colour_values[j] = colour_values[j] - 1
        modify.append(colour_values)
        colour_values = [value for value in pix_iter.__next__()[:3]]
        for j in range(2):
            if (coded_text[i][j+6] == 1 and colour_values[j] % 2 == 0):
                colour_values[j] = max(1, colour_values[j] - 1)
            elif (coded_text[i][j+6] == 0 and colour_values[j] % 2 == 1):
                colour_values[j] = colour_values[j] - 1
        if colour_values[2] % 2 == 1:
            colour_values[2] = colour_values[2] - 1
        modify.append(colour_values)
    modify[-1][-1] = modify[-1][-1] + 1
    return modify

def encode_info(image_loc, info):
    x = 0
    y = 0
    count = 0
    length = image_loc.size[0]
    modified = modPix(image_loc.getdata(), info)
    for px in modified:
        count += 1
        image_loc.putpixel((x, y), tuple(px))
        x = count % length
        y = count // length

def encode():
	img = input("Enter image name with extension (for example, image.png): ")
	image = Image.open(img, 'r')

	data = input("Enter secret text message : ")
	if (len(data) == 0):
		raise ValueError('Data is empty')

	newimg = image.copy()
	encode_info(newimg, data)

	new_img_name = input("Enter the name of new image with extension (for example, image.png) : ")
	newimg.save(new_img_name, str(new_img_name.split(".")[1].upper()))

def decode():
  img = input("Enter image name with extension (for example, image.png): ")
  image = Image.open(img, 'r')

  data = ''
  imgdata = iter(image.getdata())

  while True:
    binstr = ''
    pixels = [value for value in imgdata.__next__()[:3]]
    for i in pixels:
      binstr += str(i % 2)
    pixels = [value for value in imgdata.__next__()[:3]]
    for i in pixels:
      binstr += str(i % 2)
    pixels = [value for value in imgdata.__next__()[:3]]
    for i in pixels[:2]:
      binstr += str(i % 2)
    data += chr(int(binstr, 2))
    if (pixels[-1] % 2 != 0):
      return data

def main():
  a = int(input("Welcome to Steganography! \n(1) Encode\n(2) Decode\nPlease type 1 or 2\n"))
  if a == 1:
    encode()
  elif a == 2:
    print("Secret Text Message : " + decode())
  else:
    raise Exception("Enter correct input")

if __name__ == '__main__' :
	main()